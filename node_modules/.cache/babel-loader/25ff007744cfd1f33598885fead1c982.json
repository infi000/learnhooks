{"ast":null,"code":"import _classCallCheck from \"/Users/sf/Desktop/zcy/hooksdemo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sf/Desktop/zcy/hooksdemo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sf/Desktop/zcy/hooksdemo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sf/Desktop/zcy/hooksdemo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sf/Desktop/zcy/hooksdemo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sf/Desktop/zcy/hooksdemo/src/demos/components/functionaldemo.jsx\";\n//没有自身的状态，相同的props输入必然会获得完全相同的组件展示。不需要关心组件的一些生命周期函数和渲染的钩子更简洁。\nimport React, { Component } from \"react\";\n\nvar Button = function Button(_ref) {\n  var day = _ref.day;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-warning\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, \"\\u6211\\u662F \", day));\n};\n\nvar Greeting =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Greeting, _Component);\n\n  function Greeting() {\n    _classCallCheck(this, Greeting);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Greeting).apply(this, arguments));\n  }\n\n  _createClass(Greeting, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Button, {\n        day: \"\\u7EAF\\u51FD\\u6570\\u7EC4\\u4EF6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Greeting;\n}(Component);\n\nexport default Greeting;","map":{"version":3,"sources":["/Users/sf/Desktop/zcy/hooksdemo/src/demos/components/functionaldemo.jsx"],"names":["React","Component","Button","day","Greeting"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AACA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAa;AAAA,MAAVC,GAAU,QAAVA,GAAU;AAC1B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAwCA,GAAxC,CADF,CADF;AAKD,CAND;;IAOMC,Q;;;;;;;;;;;;;6BACK;AACP,aAAO,oBAAC,MAAD;AAAQ,QAAA,GAAG,EAAC,gCAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EAHoBH,S;;AAKvB,eAAeG,QAAf","sourcesContent":["//没有自身的状态，相同的props输入必然会获得完全相同的组件展示。不需要关心组件的一些生命周期函数和渲染的钩子更简洁。\nimport React, { Component } from \"react\";\nconst Button = ({ day }) => {\n  return (\n    <div>\n      <button className=\"btn btn-warning\">我是 {day}</button>\n    </div>\n  );\n};\nclass Greeting extends Component {\n  render() {\n    return <Button day=\"纯函数组件\"></Button>;\n  }\n}\nexport default Greeting;\n"]},"metadata":{},"sourceType":"module"}