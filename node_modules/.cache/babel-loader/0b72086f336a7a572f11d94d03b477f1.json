{"ast":null,"code":"import _slicedToArray from \"/Users/zhangchiyang/Desktop/study/learnhooks/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/zhangchiyang/Desktop/study/learnhooks/src/demos/hooks/hooks-part-demo.jsx\";\n\n/**\n * 以上我们学习过的方法均提供了ref\n * useState 返回有状态值，以及更新这个状态值的函数\n * useEffect 接受包含命令式，可能有副作用代码的函数。\n * useContext 接受上下文对象（从React.createContext返回的值）并返回当前上下文值，\n * useReducer useState的替代方案。接受类型为(state，action) => newState的reducer，并返回与dispatch方法配对的当前状态。 \n * useCallback  返回一个回忆的memoized版本，该版本仅在其中一个输入发生更改时才会更改。纯函数的输入输出确定性\n * useMemo 纯的一个记忆函数\n * useRef 返回一个可变的ref对象，其.current属性被初始化为传递的参数\n * useImperativeMethods 自定义使用ref时公开给父组件的实例值\n * useMutationEffect 更新兄弟组件之前，它在React执行其DOM改变的同一阶段同步触发\n * useLayoutEffect DOM改变后同步触发。使用它来从DOM读取布局并同步重新渲染\n */\nimport React, { memo, createContext, forwardRef, useState, useEffect, useCallback, useContext, useRef, useImperativeHandle } from 'react';\nvar TestContext = createContext('default');\nvar Comp = memo(function (props) {\n  useEffect(function () {\n    console.log('comp updated');\n  });\n\n  var updateValue = function updateValue() {\n    props.onChick(props.name + '1');\n  };\n\n  return React.createElement(\"button\", {\n    onClick: updateValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"button \", props.name);\n});\nvar ContextComp = forwardRef(function (props, ref) {\n  var _useState = useState('123'),\n      _useState2 = _slicedToArray(_useState, 1),\n      name = _useState2[0];\n\n  var context = useContext(TestContext);\n  useEffect(function () {\n    console.log('context comp updated');\n  });\n  useImperativeHandle(ref, function () {\n    return {\n      method: function method() {\n        console.log('method invoked');\n      }\n    };\n  });\n  return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, context, \" \", name);\n});\nexport default function App() {\n  var _useState3 = useState('jokcy'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      name = _useState4[0],\n      setName = _useState4[1];\n\n  var _useState5 = useState('compName'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      compName = _useState6[0],\n      setCompName = _useState6[1];\n\n  var ref = useRef();\n  useEffect(function () {\n    console.log('component update');\n    ref.current.method(); // api.sub\n\n    return function () {\n      console.log('unbind');\n    };\n  }, [name]); // 去掉这个数组就会每次都调用\n\n  var compCallback = useCallback(function (value) {\n    setCompName(value);\n  }, [compName]); // 演示没有`[compName]`每次Comp都会调用effect\n\n  return React.createElement(React.Fragment, null, React.createElement(\"input\", {\n    type: \"text\",\n    value: name,\n    onChange: function onChange(e) {\n      return setName(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(Comp, {\n    name: compName,\n    onClick: compCallback,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(TestContext.Provider, {\n    value: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(ContextComp, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/zhangchiyang/Desktop/study/learnhooks/src/demos/hooks/hooks-part-demo.jsx"],"names":["React","memo","createContext","forwardRef","useState","useEffect","useCallback","useContext","useRef","useImperativeHandle","TestContext","Comp","props","console","log","updateValue","onChick","name","ContextComp","ref","context","method","App","setName","compName","setCompName","current","compCallback","value","e","target"],"mappings":"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","sourcesContent":["/**\n * 以上我们学习过的方法均提供了ref\n * useState 返回有状态值，以及更新这个状态值的函数\n * useEffect 接受包含命令式，可能有副作用代码的函数。\n * useContext 接受上下文对象（从React.createContext返回的值）并返回当前上下文值，\n * useReducer useState的替代方案。接受类型为(state，action) => newState的reducer，并返回与dispatch方法配对的当前状态。 \n * useCallback  返回一个回忆的memoized版本，该版本仅在其中一个输入发生更改时才会更改。纯函数的输入输出确定性\n * useMemo 纯的一个记忆函数\n * useRef 返回一个可变的ref对象，其.current属性被初始化为传递的参数\n * useImperativeMethods 自定义使用ref时公开给父组件的实例值\n * useMutationEffect 更新兄弟组件之前，它在React执行其DOM改变的同一阶段同步触发\n * useLayoutEffect DOM改变后同步触发。使用它来从DOM读取布局并同步重新渲染\n */\nimport React, {\n    memo,\n    createContext,\n    forwardRef,\n    useState,\n    useEffect,\n    useCallback,\n    useContext,\n    useRef,\n    useImperativeHandle\n  } from 'react'\n  \n  const TestContext = createContext('default')\n  \n  const Comp = memo((props) => {\n    useEffect(() => {\n      console.log('comp updated')\n    })\n  \n    const updateValue = () => {\n      props.onChick(props.name + '1')\n    }\n  \n    return <button onClick={updateValue}>button {props.name}</button>\n  })\n  \n  const ContextComp = forwardRef((props, ref) => {\n    const [name] = useState('123')\n    const context = useContext(TestContext)\n  \n    useEffect(() => {\n      console.log('context comp updated')\n    })\n  \n    useImperativeHandle(ref, () => ({\n      method() {\n        console.log('method invoked')\n      }\n    }))\n  \n    return <p>{context} {name}</p>\n  })\n  \n  export default function App() {\n    const [name, setName] = useState('jokcy')\n    const [compName, setCompName] = useState('compName')\n    const ref = useRef()\n    useEffect(() => {\n      console.log('component update')\n      ref.current.method()\n      // api.sub\n      return () => {\n        console.log('unbind')\n      }\n    }, [name]) // 去掉这个数组就会每次都调用\n  \n    const compCallback = useCallback((value) => {\n      setCompName(value)\n    }, [compName]) // 演示没有`[compName]`每次Comp都会调用effect\n  \n    return (\n      <>\n        <input type=\"text\" value={name} onChange={e => setName(e.target.value)} />\n        <Comp name={compName} onClick={compCallback} />\n        <TestContext.Provider value={name}>\n          <ContextComp ref={ref} />\n        </TestContext.Provider>\n      </>\n    )\n  }\n  "]},"metadata":{},"sourceType":"module"}